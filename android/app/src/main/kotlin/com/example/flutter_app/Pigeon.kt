// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Stock (
  val symbol: String? = null,
  val name: String? = null,
  val price: Double? = null,
  val date: String? = null,
  val change: Double? = null,
  val percentChange: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Stock {
      val symbol = list[0] as String?
      val name = list[1] as String?
      val price = list[2] as Double?
      val date = list[3] as String?
      val change = list[4] as Double?
      val percentChange = list[5] as Double?
      return Stock(symbol, name, price, date, change, percentChange)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      symbol,
      name,
      price,
      date,
      change,
      percentChange,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class StockInvest (
  val symbol: String? = null,
  val name: String? = null,
  val investedTotal: Double? = null,
  val quantity: Double? = null,
  val currentValue: Double? = null,
  val pl: Double? = null,
  val percentagePL: Double? = null,
  val averagePrice: Double? = null,
  val ltp: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): StockInvest {
      val symbol = list[0] as String?
      val name = list[1] as String?
      val investedTotal = list[2] as Double?
      val quantity = list[3] as Double?
      val currentValue = list[4] as Double?
      val pl = list[5] as Double?
      val percentagePL = list[6] as Double?
      val averagePrice = list[7] as Double?
      val ltp = list[8] as Double?
      return StockInvest(symbol, name, investedTotal, quantity, currentValue, pl, percentagePL, averagePrice, ltp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      symbol,
      name,
      investedTotal,
      quantity,
      currentValue,
      pl,
      percentagePL,
      averagePrice,
      ltp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyRequest (
  val id: String? = null,
  val ticker: String? = null,
  val function: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyRequest {
      val id = list[0] as String?
      val ticker = list[1] as String?
      val function = list[2] as String?
      return MyRequest(id, ticker, function)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      ticker,
      function,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyResponse (
  val id: String? = null,
  val result: List<Stock?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyResponse {
      val id = list[0] as String?
      val result = list[1] as List<Stock?>?
      return MyResponse(id, result)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      result,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object MyApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyRequest.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyResponse.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Stock.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyRequest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyResponse -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Stock -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyApi {
  fun getStocksInfo(request: MyRequest, callback: (Result<MyResponse>) -> Unit)

  companion object {
    /** The codec used by MyApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyApiCodec
    }
    /** Sets up an instance of `MyApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyApi.getStocksInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as MyRequest
            api.getStocksInfo(requestArg) { result: Result<MyResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object StockApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Stock.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Stock -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface StockApi {
  fun getStocks(ticker: String, function: String, callback: (Result<List<Stock?>>) -> Unit)

  companion object {
    /** The codec used by StockApi. */
    val codec: MessageCodec<Any?> by lazy {
      StockApiCodec
    }
    /** Sets up an instance of `StockApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: StockApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StockApi.getStocks", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tickerArg = args[0] as String
            val functionArg = args[1] as String
            api.getStocks(tickerArg, functionArg) { result: Result<List<Stock?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object StockInvestApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          StockInvest.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is StockInvest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface StockInvestApi {
  fun getStocksInvest(callback: (Result<List<StockInvest?>>) -> Unit)

  companion object {
    /** The codec used by StockInvestApi. */
    val codec: MessageCodec<Any?> by lazy {
      StockInvestApiCodec
    }
    /** Sets up an instance of `StockInvestApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: StockInvestApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StockInvestApi.getStocksInvest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getStocksInvest() { result: Result<List<StockInvest?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
