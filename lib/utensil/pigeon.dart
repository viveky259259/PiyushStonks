// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class Stock {
  Stock({
    this.symbol,
    this.name,
    this.price,
    this.date,
    this.change,
    this.percentChange,
  });

  String? symbol;

  String? name;

  double? price;

  String? date;

  double? change;

  double? percentChange;

  Object encode() {
    return <Object?>[
      symbol,
      name,
      price,
      date,
      change,
      percentChange,
    ];
  }

  static Stock decode(Object result) {
    result as List<Object?>;
    return Stock(
      symbol: result[0] as String?,
      name: result[1] as String?,
      price: result[2] as double?,
      date: result[3] as String?,
      change: result[4] as double?,
      percentChange: result[5] as double?,
    );
  }
}

class StockInvest {
  StockInvest({
    this.symbol,
    this.name,
    this.investedTotal,
    this.quantity,
    this.currentValue,
    this.pl,
    this.percentagePL,
    this.averagePrice,
    this.ltp,
  });

  String? symbol;

  String? name;

  double? investedTotal;

  double? quantity;

  double? currentValue;

  double? pl;

  double? percentagePL;

  double? averagePrice;

  double? ltp;

  Object encode() {
    return <Object?>[
      symbol,
      name,
      investedTotal,
      quantity,
      currentValue,
      pl,
      percentagePL,
      averagePrice,
      ltp,
    ];
  }

  static StockInvest decode(Object result) {
    result as List<Object?>;
    return StockInvest(
      symbol: result[0] as String?,
      name: result[1] as String?,
      investedTotal: result[2] as double?,
      quantity: result[3] as double?,
      currentValue: result[4] as double?,
      pl: result[5] as double?,
      percentagePL: result[6] as double?,
      averagePrice: result[7] as double?,
      ltp: result[8] as double?,
    );
  }
}

class MyRequest {
  MyRequest({
    this.id,
    this.ticker,
    this.function,
  });

  String? id;

  String? ticker;

  String? function;

  Object encode() {
    return <Object?>[
      id,
      ticker,
      function,
    ];
  }

  static MyRequest decode(Object result) {
    result as List<Object?>;
    return MyRequest(
      id: result[0] as String?,
      ticker: result[1] as String?,
      function: result[2] as String?,
    );
  }
}

class MyResponse {
  MyResponse({
    this.id,
    this.result,
  });

  String? id;

  List<Stock?>? result;

  Object encode() {
    return <Object?>[
      id,
      result,
    ];
  }

  static MyResponse decode(Object result) {
    result as List<Object?>;
    return MyResponse(
      id: result[0] as String?,
      result: (result[1] as List<Object?>?)?.cast<Stock?>(),
    );
  }
}

class _MyApiCodec extends StandardMessageCodec {
  const _MyApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is Stock) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return MyRequest.decode(readValue(buffer)!);
      case 129:
        return MyResponse.decode(readValue(buffer)!);
      case 130:
        return Stock.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MyApi {
  /// Constructor for [MyApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MyApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MyApiCodec();

  Future<MyResponse> getStocksInfo(MyRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyApi.getStocksInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MyResponse?)!;
    }
  }
}

class _StockApiCodec extends StandardMessageCodec {
  const _StockApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Stock) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return Stock.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class StockApi {
  /// Constructor for [StockApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  StockApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _StockApiCodec();

  Future<List<Stock?>> getStocks(String arg_ticker, String arg_function) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.StockApi.getStocks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_ticker, arg_function]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Stock?>();
    }
  }
}

class _StockInvestApiCodec extends StandardMessageCodec {
  const _StockInvestApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StockInvest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return StockInvest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GetInvestedStock {
  /// Constructor for [GetInvestedStock].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GetInvestedStock({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _StockInvestApiCodec();

  Future<List<StockInvest?>> getStocksInvest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.StockInvestApi.getStocksInvest', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<StockInvest?>();
    }
  }
}
